# Project name (used as prefix for containers and images)
name: "microservices"

services:
  # MICROSERVICES
  api-gateway:
    build:
      context: ./microservices-api-gateway
      target: development
      args:
        - MODE=development
    container_name: api-gateway
    ports:
      - 4000:4000
    depends_on:
      - user-service
      - authentication-service
      - upload-service
      - video-catalog-service
    restart: always
    volumes:
      - ./microservices-api-gateway:/app

  user-service:
    build:
      context: ./microservices-user-service
      target: development
    container_name: user-service
    ports:
      - 5000:5000 # gRPC
      - 5010:5010 # HTTP (prometheus)
    depends_on:
      - user-db
    restart: always
    volumes:
      - ./microservices-user-service:/app
      - /app/node_modules

  authentication-service:
    build:
      context: ./microservices-authentication-service
      target: development
      args:
        - MODE=development
    container_name: authentication-service
    ports:
      - 5001:5001 # gRPC
      - 5011:5011 # HTTP (prometheus)
    depends_on:
      - user-service
      - redis
    restart: always
    volumes:
      - ./microservices-authentication-service:/app

  upload-service:
    build:
      context: ./microservices-upload-service
      target: development
      args:
        - MODE=development
    container_name: upload-service
    ports:
      - 5002:5002 # gRPC
      - 5012:5012 # HTTP (prometheus)
    depends_on:
      - rabbitmq
    restart: always
    volumes:
      - ./microservices-upload-service:/app

  encode-service:
    build:
      context: ./microservices-encode-service
      target: development
      args:
        - MODE=development
    container_name: encode-service
    ports:
      - 5004:5004 # gRPC
      - 5014:5014 # HTTP (prometheus)
    depends_on:
      - rabbitmq
    restart: always
    volumes:
      - ./microservices-encode-service:/app

  video-catalog-service:
    build:
      context: ./microservices-video-catalog-service
      target: development
      args:
        - MODE=development
    container_name: video-catalog-service
    ports:
      - 5003:5003 # gRPC
      - 5013:5013 # HTTP (prometheus)
    depends_on:
      - rabbitmq
      - video-catalog-db
    restart: always
    volumes:
      - ./microservices-video-catalog-service:/app

  # DATABASES
  user-db:
    image: postgres:14
    container_name: user-db
    # ports:
    #   - 5432:5432
    environment:
      - POSTGRES_DB=microservices_user_service
      - POSTGRES_PASSWORD=password
    volumes:
      - ./docker/user-db/data:/var/lib/postgresql/data
      - ./docker/user-db/config/postgresql.conf:/etc/postgresql/postgresql.conf

  video-catalog-db:
    image: postgres:14
    container_name: video-catalog-db
    # ports:
    #   - 5433:5432
    environment:
      - POSTGRES_DB=microservices_video_catalog_service
      - POSTGRES_PASSWORD=password
    volumes:
      - ./docker/video-catalog-db/data:/var/lib/postgresql/data
      - ./docker/video-catalog-db/config/postgresql.conf:/etc/postgresql/postgresql.conf

  pgadmin:
    image: dpage/pgadmin4:8.13.0
    container_name: pgadmin
    ports:
      - 8080:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=password
    volumes:
      - ./docker/pgadmin/data:/var/lib/pgadmin
    attach: false

  # CACHES
  redis:
    image: redis:7.2
    container_name: redis
    # ports:
    #   - 6379:6379
    volumes:
      - ./docker/redis/data:/data
      - ./docker/redis/config/redis.conf:/usr/local/etc/redis/redis.conf

  # MESSAGE BROKERS
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      # - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=default
      - RABBITMQ_DEFAULT_PASS=default
    volumes:
      - ./docker/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./docker/rabbitmq/data:/var/lib/rabbitmq/mnesia

  # MONITORING
  grafana:
    image: grafana/grafana-enterprise:11.3.0
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./docker/grafana/data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    attach: false

  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: prometheus
    # ports:
    #   - 9090:9090
    volumes:
      - ./docker/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/data:/prometheus
    attach: false

  loki:
    image: grafana/loki:2.7.0
    container_name: loki
    # ports:
    #   - 3100:3100
    volumes:
      - ./docker/loki/data:/loki
    attach: false

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:1.0.0
    container_name: rabbitmq-exporter
    # ports:
    #   - "9419:9419"
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=default
      - RABBIT_PASSWORD=default
    depends_on:
      - rabbitmq
    attach: false

  redis-exporter:
    image: oliver006/redis_exporter:v1.67.0
    container_name: redis-exporter
    # ports:
    #   - 9121:9121
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    attach: false

  user-db-exporter:
    image: prometheuscommunity/postgres-exporter:v0.16.0
    container_name: user-db-exporter
    # ports:
    #   - 9187:9187
    environment:
      - DATA_SOURCE_URI=user-db:5432/microservices_user_service?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=password
    depends_on:
      - user-db
    attach: false

  video-catalog-db-exporter:
    image: prometheuscommunity/postgres-exporter:v0.16.0
    container_name: video-catalog-db-exporter
    # ports:
    #   - 9187:9187
    environment:
      - DATA_SOURCE_URI=video-catalog-db:5432/microservices_video_catalog_service?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=password
    depends_on:
      - video-catalog-db
    attach: false
